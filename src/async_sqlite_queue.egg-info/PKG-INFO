Metadata-Version: 2.4
Name: async-sqlite-queue
Version: 0.1.0
Summary: A thread-safe SQLite3 wrapper that performs writes in a background thread for non-blocking operations.
Author-email: venantvr <venantvr@gmail.com>
Project-URL: Homepage, https://github.com/venantvr-pubsub/Python.SQLite.Async
Project-URL: Bug Tracker, https://github.com/venantvr-pubsub/Python.SQLite.Async/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Database
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-mock; extra == "test"
Provides-Extra: dev
Requires-Dist: black; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: build; extra == "dev"

# Async SQLite Queue

[![PyPI version](https://badge.fury.io/py/async-sqlite-queue.svg)](https://badge.fury.io/py/async-sqlite-queue)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Une librairie Python simple et robuste pour interagir avec une base de donn√©es SQLite de mani√®re thread-safe, en d√©portant toutes les op√©rations d'√©criture dans un thread
d√©di√© pour ne pas bloquer votre application principale.

## üöÄ Fonctionnalit√©s

* **√âcritures non-bloquantes** : Les `INSERT`, `UPDATE`, `DELETE` sont ajout√©s √† une file et ex√©cut√©s en arri√®re-plan.
* **Thread-Safe** : G√©rez vos acc√®s √† SQLite depuis plusieurs threads sans corruption de donn√©es.
* **API simple** : Des m√©thodes claires (`execute_write`, `execute_read`) pour une prise en main imm√©diate.
* **Mode WAL activ√©** : Active automatiquement le mode "Write-Ahead Logging" pour une meilleure concurrence entre les lectures et les √©critures.
* **Support In-Memory partag√©** : Utilise automatiquement `file::memory:?cache=shared` pour les bases de donn√©es en m√©moire accessibles par plusieurs threads.
* **Aucune d√©pendance externe** : Repose uniquement sur la biblioth√®que standard de Python.

## üì¶ Installation

```bash
pip install async-sqlite-queue
````

## üí° Utilisation

Voici un exemple simple pour d√©marrer, √©crire des donn√©es de mani√®re asynchrone, et les lire de mani√®re synchrone.

```python
import time
import logging
from async_sqlite_queue import AsyncSQLite

# Configurez le logging pour voir ce qui se passe
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(threadName)s - %(message)s')

# 1. Initialisez le manager de base de donn√©es (sur disque ou en m√©moire)
db = AsyncSQLite(db_path="my_app.db")

# 2. D√©marrez le worker en arri√®re-plan
# Vous pouvez aussi passer un script de migration qui ne s'ex√©cutera que si la table "users" n'existe pas.
# db.start(migration_script_path="schema.sql", check_table="users")
db.start()

# 3. Attendez que la base de donn√©es soit pr√™te (essentiel au d√©marrage d'une app)
if not db.wait_for_ready():
    raise RuntimeError("La base de donn√©es n'a pas pu s'initialiser.")

print("La base de donn√©es est pr√™te !")

# 4. Ex√©cutez des √©critures (non-bloquant)
db.execute_write("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, email TEXT)")
db.execute_write("INSERT INTO users (name, email) VALUES (?, ?)", ("Alice", "alice@example.com"))
db.execute_write("INSERT INTO users (name, email) VALUES (?, ?)", ("Bob", "bob@example.com"))

print("Op√©rations d'√©criture mises en file.")

# Laissez un peu de temps au worker pour traiter la file
time.sleep(0.1)

# 5. Lisez les donn√©es (bloquant, retourne les r√©sultats imm√©diatement)
users = db.execute_read("SELECT name, email FROM users ORDER BY name")
print("\nUtilisateurs trouv√©s :")
for user in users:
    print(f"- {user[0]} ({user[1]})")

# 6. Arr√™tez proprement le worker √† la fin de votre application
db.stop()
print("\nWorker arr√™t√©.")
```

## üîß D√©veloppement

Pour contribuer ou lancer les tests localement :

```bash
# Clonez le d√©p√¥t
git clone [https://github.com/venantvr-pubsub/Python.SQLite.Async.git](https://github.com/venantvr-pubsub/Python.SQLite.Async.git)
cd Python.SQLite.Async

# 1. Installez l'environnement et les d√©pendances
make install

# 2. Activez l'environnement virtuel
source .venv/bin/activate

# 3. Lancez les tests
make test

# Autres commandes utiles
make format  # Formate le code
make lint    # V√©rifie la qualit√© du code
make build   # Construit les paquets pour la distribution
```

## üìÑ Licence

Ce projet est sous licence MIT.
